# coding: utf-8

"""
    null

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: null
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from footprint.api_client import ApiClient


class FootprintApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def copy_user_footprint(self, owner, name, request, **kwargs):  # noqa: E501
        """Copy from and existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.copy_user_footprint(owner, name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param FootprintRequest request: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.copy_user_footprint_with_http_info(owner, name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_user_footprint_with_http_info(owner, name, request, **kwargs)  # noqa: E501
            return data

    def copy_user_footprint_with_http_info(self, owner, name, request, **kwargs):  # noqa: E501
        """Copy from and existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.copy_user_footprint_with_http_info(owner, name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param FootprintRequest request: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_user_footprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `copy_user_footprint`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `copy_user_footprint`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `copy_user_footprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}?op=copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user_footprint(self, owner, name, request, **kwargs):  # noqa: E501
        """Create new footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_user_footprint(owner, name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param FootprintRequest request: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_user_footprint_with_http_info(owner, name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_footprint_with_http_info(owner, name, request, **kwargs)  # noqa: E501
            return data

    def create_user_footprint_with_http_info(self, owner, name, request, **kwargs):  # noqa: E501
        """Create new footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_user_footprint_with_http_info(owner, name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param FootprintRequest request: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_footprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `create_user_footprint`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_user_footprint`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_user_footprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user_footprint_region(self, owner, name, region_name, request, **kwargs):  # noqa: E501
        """Create new region under an existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_user_footprint_region(owner, name, region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :param FootprintRegionRequest request: null (required)
        :return: FootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_user_footprint_region_with_http_info(owner, name, region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_footprint_region_with_http_info(owner, name, region_name, request, **kwargs)  # noqa: E501
            return data

    def create_user_footprint_region_with_http_info(self, owner, name, region_name, request, **kwargs):  # noqa: E501
        """Create new region under an existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_user_footprint_region_with_http_info(owner, name, region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :param FootprintRegionRequest request: null (required)
        :return: FootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'region_name', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `create_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `create_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_user_footprint_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintRegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_footprint(self, owner, name, **kwargs):  # noqa: E501
        """Delete footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_user_footprint(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_user_footprint_with_http_info(owner, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_footprint_with_http_info(owner, name, **kwargs)  # noqa: E501
            return data

    def delete_user_footprint_with_http_info(self, owner, name, **kwargs):  # noqa: E501
        """Delete footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_user_footprint_with_http_info(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_footprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `delete_user_footprint`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_user_footprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RestError',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_footprint_region(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Delete a region under an existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_user_footprint_region(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_user_footprint_region_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_footprint_region_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
            return data

    def delete_user_footprint_region_with_http_info(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Delete a region under an existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_user_footprint_region_with_http_info(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `delete_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `delete_user_footprint_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RestError',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_footprints(self, **kwargs):  # noqa: E501
        """Returns the list of footprints of the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_footprints(async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null
        :param str name: null
        :param str _from: null
        :param str max: null
        :return: FootprintListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.find_footprints_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_footprints_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_footprints_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the list of footprints of the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_footprints_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null
        :param str name: null
        :param str _from: null
        :param str max: null
        :return: FootprintListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', '_from', 'max']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_footprints" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'owner' in params:
            query_params.append(('owner', params['owner']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/footprints?owner={owner}&name={name}&from={from}&max={max}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_user_footprint_regions(self, owner, name, **kwargs):  # noqa: E501
        """Returns the list of the regions of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_user_footprint_regions(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null
        :param str _from: null
        :param str max: null
        :return: FootprintRegionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.find_user_footprint_regions_with_http_info(owner, name, **kwargs)  # noqa: E501
        else:
            (data) = self.find_user_footprint_regions_with_http_info(owner, name, **kwargs)  # noqa: E501
            return data

    def find_user_footprint_regions_with_http_info(self, owner, name, **kwargs):  # noqa: E501
        """Returns the list of the regions of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_user_footprint_regions_with_http_info(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null
        :param str _from: null
        :param str max: null
        :return: FootprintRegionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'region_name', '_from', 'max']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_user_footprint_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `find_user_footprint_regions`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `find_user_footprint_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'region_name' in params:
            query_params.append(('regionName', params['region_name']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions?regionName={regionName}&from={from}&max={max}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintRegionListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_user_footprints(self, owner, **kwargs):  # noqa: E501
        """Returns the list of footprints of the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_user_footprints(owner, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null
        :param str _from: null
        :param str max: null
        :return: FootprintListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.find_user_footprints_with_http_info(owner, **kwargs)  # noqa: E501
        else:
            (data) = self.find_user_footprints_with_http_info(owner, **kwargs)  # noqa: E501
            return data

    def find_user_footprints_with_http_info(self, owner, **kwargs):  # noqa: E501
        """Returns the list of footprints of the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_user_footprints_with_http_info(owner, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null
        :param str _from: null
        :param str max: null
        :return: FootprintListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', '_from', 'max']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_user_footprints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `find_user_footprints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints?name={name}&from={from}&max={max}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint(self, owner, name, **kwargs):  # noqa: E501
        """Returns the header information of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_with_http_info(owner, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_with_http_info(owner, name, **kwargs)  # noqa: E501
            return data

    def get_user_footprint_with_http_info(self, owner, name, **kwargs):  # noqa: E501
        """Returns the header information of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_with_http_info(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_user_footprint`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_user_footprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint_outline(self, **kwargs):  # noqa: E501
        """Returns the outline a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_outline(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_outline_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_outline_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_footprint_outline_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the outline a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_outline_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint_outline" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/outline', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint_outline_points(self, owner, name, **kwargs):  # noqa: E501
        """Returns the points of the outline of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_outline_points(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str resolution: null
        :return: EquatorialPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_outline_points_with_http_info(owner, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_outline_points_with_http_info(owner, name, **kwargs)  # noqa: E501
            return data

    def get_user_footprint_outline_points_with_http_info(self, owner, name, **kwargs):  # noqa: E501
        """Returns the points of the outline of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_outline_points_with_http_info(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str resolution: null
        :return: EquatorialPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'resolution']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint_outline_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_user_footprint_outline_points`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_user_footprint_outline_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'resolution' in params:
            query_params.append(('resolution', params['resolution']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/outline/points?res={resolution}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquatorialPoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint_region(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Returns the header information of a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :return: FootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_region_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_region_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
            return data

    def get_user_footprint_region_with_http_info(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Returns the header information of a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region_with_http_info(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :return: FootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_user_footprint_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintRegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint_region_outline(self, **kwargs):  # noqa: E501
        """Returns the outline a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region_outline(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_region_outline_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_region_outline_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_footprint_region_outline_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the outline a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region_outline_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint_region_outline" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}/outline', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint_region_outline_points(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Returns the points of the outline of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region_outline_points(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :param str resolution: null
        :return: EquatorialPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_region_outline_points_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_region_outline_points_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
            return data

    def get_user_footprint_region_outline_points_with_http_info(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Returns the points of the outline of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region_outline_points_with_http_info(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :param str resolution: null
        :return: EquatorialPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'region_name', 'resolution']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint_region_outline_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_user_footprint_region_outline_points`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_user_footprint_region_outline_points`")  # noqa: E501
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_user_footprint_region_outline_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'resolution' in params:
            query_params.append(('resolution', params['resolution']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}/outline/points?res={resolution}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquatorialPoint',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint_region_shape(self, **kwargs):  # noqa: E501
        """Returns the shape description of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region_shape(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_region_shape_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_region_shape_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_footprint_region_shape_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the shape description of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region_shape_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint_region_shape" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/octet-stream', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}/shape', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint_region_thumbnail(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Get the thumbnail of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region_thumbnail(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_region_thumbnail_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_region_thumbnail_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
            return data

    def get_user_footprint_region_thumbnail_with_http_info(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Get the thumbnail of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_region_thumbnail_with_http_info(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint_region_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_user_footprint_region_thumbnail`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_user_footprint_region_thumbnail`")  # noqa: E501
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_user_footprint_region_thumbnail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}/thumbnail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint_shape(self, **kwargs):  # noqa: E501
        """Returns the shape description of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_shape(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_shape_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_shape_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_footprint_shape_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the shape description of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_shape_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint_shape" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/octet-stream', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/shape', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_footprint_thumbnail(self, owner, name, **kwargs):  # noqa: E501
        """Get the thumbnail of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_thumbnail(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_user_footprint_thumbnail_with_http_info(owner, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_footprint_thumbnail_with_http_info(owner, name, **kwargs)  # noqa: E501
            return data

    def get_user_footprint_thumbnail_with_http_info(self, owner, name, **kwargs):  # noqa: E501
        """Get the thumbnail of a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_user_footprint_thumbnail_with_http_info(owner, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_footprint_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `get_user_footprint_thumbnail`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_user_footprint_thumbnail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/thumbnail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_user_footprint(self, owner, name, request, **kwargs):  # noqa: E501
        """Modify existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_user_footprint(owner, name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param FootprintRequest request: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_user_footprint_with_http_info(owner, name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_user_footprint_with_http_info(owner, name, request, **kwargs)  # noqa: E501
            return data

    def modify_user_footprint_with_http_info(self, owner, name, request, **kwargs):  # noqa: E501
        """Modify existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_user_footprint_with_http_info(owner, name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param FootprintRequest request: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_user_footprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `modify_user_footprint`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `modify_user_footprint`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `modify_user_footprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_user_footprint_region(self, owner, name, region_name, request, **kwargs):  # noqa: E501
        """Modify a region under an existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_user_footprint_region(owner, name, region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :param FootprintRegionRequest request: null (required)
        :return: FootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_user_footprint_region_with_http_info(owner, name, region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_user_footprint_region_with_http_info(owner, name, region_name, request, **kwargs)  # noqa: E501
            return data

    def modify_user_footprint_region_with_http_info(self, owner, name, region_name, request, **kwargs):  # noqa: E501
        """Modify a region under an existing footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_user_footprint_region_with_http_info(owner, name, region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :param FootprintRegionRequest request: null (required)
        :return: FootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'region_name', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_user_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `modify_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `modify_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `modify_user_footprint_region`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `modify_user_footprint_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintRegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_user_footprint(self, **kwargs):  # noqa: E501
        """Plots a footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_user_footprint(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_user_footprint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.plot_user_footprint_with_http_info(**kwargs)  # noqa: E501
            return data

    def plot_user_footprint_with_http_info(self, **kwargs):  # noqa: E501
        """Plots a footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_user_footprint_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_user_footprint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/plot?proj={projection}&sys={sys}&ra={ra}&dec={dec}&b={b}&l={l}&width={width}&height={height}&theme={colorTheme}&zoom={autoZoom}&rotate={autoRotate}&grid={grid}&degStyle={degreeStyle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_user_footprint_advanced(self, **kwargs):  # noqa: E501
        """Plots a footprint, with advanced parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_user_footprint_advanced(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_user_footprint_advanced_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.plot_user_footprint_advanced_with_http_info(**kwargs)  # noqa: E501
            return data

    def plot_user_footprint_advanced_with_http_info(self, **kwargs):  # noqa: E501
        """Plots a footprint, with advanced parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_user_footprint_advanced_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_user_footprint_advanced" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/plot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_user_footprint_region(self, **kwargs):  # noqa: E501
        """Plots a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_user_footprint_region(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_user_footprint_region_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.plot_user_footprint_region_with_http_info(**kwargs)  # noqa: E501
            return data

    def plot_user_footprint_region_with_http_info(self, **kwargs):  # noqa: E501
        """Plots a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_user_footprint_region_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_user_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}/plot?proj={projection}&sys={sys}&ra={ra}&dec={dec}&b={b}&l={l}&width={width}&height={height}&theme={colorTheme}&zoom={autoZoom}&rotate={autoRotate}&grid={grid}&degStyle={degreeStyle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_user_footprint_region_advanced(self, **kwargs):  # noqa: E501
        """Plots a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_user_footprint_region_advanced(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_user_footprint_region_advanced_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.plot_user_footprint_region_advanced_with_http_info(**kwargs)  # noqa: E501
            return data

    def plot_user_footprint_region_advanced_with_http_info(self, **kwargs):  # noqa: E501
        """Plots a footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_user_footprint_region_advanced_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_user_footprint_region_advanced" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}/plot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_user_footprint_region_shape(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Upload region shape binary or other representation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_user_footprint_region_shape(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_user_footprint_region_shape_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.set_user_footprint_region_shape_with_http_info(owner, name, region_name, **kwargs)  # noqa: E501
            return data

    def set_user_footprint_region_shape_with_http_info(self, owner, name, region_name, **kwargs):  # noqa: E501
        """Upload region shape binary or other representation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_user_footprint_region_shape_with_http_info(owner, name, region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner: null (required)
        :param str name: null (required)
        :param str region_name: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'name', 'region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_user_footprint_region_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `set_user_footprint_region_shape`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_user_footprint_region_shape`")  # noqa: E501
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `set_user_footprint_region_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Footprint.svc/users/{owner}/footprints/{name}/regions/{regionName}/shape', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RestError',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
