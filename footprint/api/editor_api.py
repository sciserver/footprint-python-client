# coding: utf-8

"""
    null

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: null
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from footprint.api_client import ApiClient


class EditorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def c_hull_regions(self, region_name, request, **kwargs):  # noqa: E501
        """Generate the convex hull of the regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.c_hull_regions(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.c_hull_regions_with_http_info(region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.c_hull_regions_with_http_info(region_name, request, **kwargs)  # noqa: E501
            return data

    def c_hull_regions_with_http_info(self, region_name, request, **kwargs):  # noqa: E501
        """Generate the convex hull of the regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.c_hull_regions_with_http_info(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'request', 'keep_original']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method c_hull_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `c_hull_regions`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `c_hull_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'keep_original' in params:
            query_params.append(('keepOriginal', params['keep_original']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/chull', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_region(self, region_name, request, **kwargs):  # noqa: E501
        """Copy a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.copy_region(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.copy_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
            return data

    def copy_region_with_http_info(self, region_name, request, **kwargs):  # noqa: E501
        """Copy a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.copy_region_with_http_info(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `copy_region`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `copy_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/copy', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_region(self, region_name, request, **kwargs):  # noqa: E501
        """Create a new region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_region(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
            return data

    def create_region_with_http_info(self, region_name, request, **kwargs):  # noqa: E501
        """Create a new region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_region_with_http_info(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `create_region`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_footprint(self, **kwargs):  # noqa: E501
        """Delete footprint and reset the editor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_footprint(async=True)
        >>> result = thread.get()

        :param async bool
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_footprint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_footprint_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_footprint_with_http_info(self, **kwargs):  # noqa: E501
        """Delete footprint and reset the editor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_footprint_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_footprint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RestError',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_region(self, region_name, **kwargs):  # noqa: E501
        """Delete a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_region(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_region_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_region_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def delete_region_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Delete a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_region_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `delete_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RestError',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_footprint(self, **kwargs):  # noqa: E501
        """Returns the footprint in raw format text or binary.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_footprint(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_footprint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_footprint_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_footprint_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the footprint in raw format text or binary.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_footprint_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_footprint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'text/plain', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/raw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_footprint_outline(self, **kwargs):  # noqa: E501
        """Returns the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_footprint_outline(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_footprint_outline_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.download_footprint_outline_with_http_info(**kwargs)  # noqa: E501
            return data

    def download_footprint_outline_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_footprint_outline_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_footprint_outline" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/outline/raw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_region(self, region_name, **kwargs):  # noqa: E501
        """Returns the shape description of the footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_region(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_region_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.download_region_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def download_region_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Returns the shape description of the footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_region_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `download_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'text/plain', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/raw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_region_outline(self, region_name, **kwargs):  # noqa: E501
        """Returns the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_region_outline(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_region_outline_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.download_region_outline_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def download_region_outline_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Returns the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_region_outline_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_region_outline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `download_region_outline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/outline/raw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint(self, **kwargs):  # noqa: E501
        """Returns the header information of the edited footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint(async=True)
        >>> result = thread.get()

        :param async bool
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_footprint_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the header information of the edited footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_outline_points(self, **kwargs):  # noqa: E501
        """Returns the points of the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_outline_points(async=True)
        >>> result = thread.get()

        :param async bool
        :param str sys: null
        :param str rep: null
        :param str resolution: null
        :param str reduce: null
        :param str limit: null
        :return: list[Point]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_outline_points_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_outline_points_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_footprint_outline_points_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the points of the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_outline_points_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str sys: null
        :param str rep: null
        :param str resolution: null
        :param str reduce: null
        :param str limit: null
        :return: list[Point]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sys', 'rep', 'resolution', 'reduce', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_outline_points" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sys' in params:
            query_params.append(('sys', params['sys']))  # noqa: E501
        if 'rep' in params:
            query_params.append(('rep', params['rep']))  # noqa: E501
        if 'resolution' in params:
            query_params.append(('resolution', params['resolution']))  # noqa: E501
        if 'reduce' in params:
            query_params.append(('reduce', params['reduce']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/outline/points', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Point]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_region(self, region_name, **kwargs):  # noqa: E501
        """Returns the header information of a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_region(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_region_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_region_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def get_region_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Returns the header information of a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_region_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_region_outline_points(self, region_name, **kwargs):  # noqa: E501
        """Returns the points of the outline of the region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_region_outline_points(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param str sys: null
        :param str rep: null
        :param str resolution: null
        :param str reduce: null
        :param str limit: null
        :return: list[Point]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_region_outline_points_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_region_outline_points_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def get_region_outline_points_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Returns the points of the outline of the region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_region_outline_points_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param str sys: null
        :param str rep: null
        :param str resolution: null
        :param str reduce: null
        :param str limit: null
        :return: list[Point]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'sys', 'rep', 'resolution', 'reduce', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_region_outline_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_region_outline_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'sys' in params:
            query_params.append(('sys', params['sys']))  # noqa: E501
        if 'rep' in params:
            query_params.append(('rep', params['rep']))  # noqa: E501
        if 'resolution' in params:
            query_params.append(('resolution', params['resolution']))  # noqa: E501
        if 'reduce' in params:
            query_params.append(('reduce', params['reduce']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/outline/points', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Point]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grow_region(self, region_name, request, **kwargs):  # noqa: E501
        """Grow region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.grow_region(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str radius: null
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.grow_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.grow_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
            return data

    def grow_region_with_http_info(self, region_name, request, **kwargs):  # noqa: E501
        """Grow region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.grow_region_with_http_info(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str radius: null
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'request', 'radius', 'keep_original']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grow_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `grow_region`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `grow_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'radius' in params:
            query_params.append(('radius', params['radius']))  # noqa: E501
        if 'keep_original' in params:
            query_params.append(('keepOriginal', params['keep_original']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/grow', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def intersect_regions(self, region_name, request, **kwargs):  # noqa: E501
        """Compute the intersection of regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.intersect_regions(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.intersect_regions_with_http_info(region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.intersect_regions_with_http_info(region_name, request, **kwargs)  # noqa: E501
            return data

    def intersect_regions_with_http_info(self, region_name, request, **kwargs):  # noqa: E501
        """Compute the intersection of regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.intersect_regions_with_http_info(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'request', 'keep_original']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intersect_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `intersect_regions`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `intersect_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'keep_original' in params:
            query_params.append(('keepOriginal', params['keep_original']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/intersect', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_regions(self, **kwargs):  # noqa: E501
        """List regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_regions(async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null
        :param str _from: null
        :param str max: null
        :return: RegionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_regions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_regions_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_regions_with_http_info(self, **kwargs):  # noqa: E501
        """List regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_regions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null
        :param str _from: null
        :param str max: null
        :return: RegionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', '_from', 'max']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_regions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'region_name' in params:
            query_params.append(('regionName', params['region_name']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_footprint(self, footprint, **kwargs):  # noqa: E501
        """Modified the properties of the footprint in the editor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_footprint(footprint, async=True)
        >>> result = thread.get()

        :param async bool
        :param FootprintRequest footprint: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_footprint_with_http_info(footprint, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_footprint_with_http_info(footprint, **kwargs)  # noqa: E501
            return data

    def modify_footprint_with_http_info(self, footprint, **kwargs):  # noqa: E501
        """Modified the properties of the footprint in the editor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_footprint_with_http_info(footprint, async=True)
        >>> result = thread.get()

        :param async bool
        :param FootprintRequest footprint: null (required)
        :return: FootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['footprint']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_footprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'footprint' is set
        if ('footprint' not in params or
                params['footprint'] is None):
            raise ValueError("Missing the required parameter `footprint` when calling `modify_footprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'footprint' in params:
            body_params = params['footprint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FootprintResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_region(self, region_name, request, **kwargs):  # noqa: E501
        """Modify a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_region(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
            return data

    def modify_region_with_http_info(self, region_name, request, **kwargs):  # noqa: E501
        """Modify a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_region_with_http_info(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `modify_region`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `modify_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_region(self, region_name, request, **kwargs):  # noqa: E501
        """Move a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.move_region(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.move_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.move_region_with_http_info(region_name, request, **kwargs)  # noqa: E501
            return data

    def move_region_with_http_info(self, region_name, request, **kwargs):  # noqa: E501
        """Move a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.move_region_with_http_info(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `move_region`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `move_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/move', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_footprint(self, **kwargs):  # noqa: E501
        """Plots the footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint(async=True)
        >>> result = thread.get()

        :param async bool
        :param str projection: null
        :param str sys: null
        :param str lon: null
        :param str lat: null
        :param str width: null
        :param str height: null
        :param str color_theme: null
        :param str auto_zoom: null
        :param str auto_rotate: null
        :param str grid: null
        :param str degree_style: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_footprint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.plot_footprint_with_http_info(**kwargs)  # noqa: E501
            return data

    def plot_footprint_with_http_info(self, **kwargs):  # noqa: E501
        """Plots the footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str projection: null
        :param str sys: null
        :param str lon: null
        :param str lat: null
        :param str width: null
        :param str height: null
        :param str color_theme: null
        :param str auto_zoom: null
        :param str auto_rotate: null
        :param str grid: null
        :param str degree_style: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projection', 'sys', 'lon', 'lat', 'width', 'height', 'color_theme', 'auto_zoom', 'auto_rotate', 'grid', 'degree_style']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_footprint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'projection' in params:
            query_params.append(('projection', params['projection']))  # noqa: E501
        if 'sys' in params:
            query_params.append(('sys', params['sys']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501
        if 'color_theme' in params:
            query_params.append(('colorTheme', params['color_theme']))  # noqa: E501
        if 'auto_zoom' in params:
            query_params.append(('autoZoom', params['auto_zoom']))  # noqa: E501
        if 'auto_rotate' in params:
            query_params.append(('autoRotate', params['auto_rotate']))  # noqa: E501
        if 'grid' in params:
            query_params.append(('grid', params['grid']))  # noqa: E501
        if 'degree_style' in params:
            query_params.append(('degreeStyle', params['degree_style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/plot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_footprint_advanced(self, plot, **kwargs):  # noqa: E501
        """Plots the footprint, with advanced parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_advanced(plot, async=True)
        >>> result = thread.get()

        :param async bool
        :param PlotRequest plot: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_footprint_advanced_with_http_info(plot, **kwargs)  # noqa: E501
        else:
            (data) = self.plot_footprint_advanced_with_http_info(plot, **kwargs)  # noqa: E501
            return data

    def plot_footprint_advanced_with_http_info(self, plot, **kwargs):  # noqa: E501
        """Plots the footprint, with advanced parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_advanced_with_http_info(plot, async=True)
        >>> result = thread.get()

        :param async bool
        :param PlotRequest plot: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plot']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_footprint_advanced" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plot' is set
        if ('plot' not in params or
                params['plot'] is None):
            raise ValueError("Missing the required parameter `plot` when calling `plot_footprint_advanced`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'plot' in params:
            body_params = params['plot']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/plot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_region(self, region_name, **kwargs):  # noqa: E501
        """Plots the region  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_region(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param str projection: null
        :param str sys: null
        :param str lon: null
        :param str lat: null
        :param str width: null
        :param str height: null
        :param str color_theme: null
        :param str auto_zoom: null
        :param str auto_rotate: null
        :param str grid: null
        :param str degree_style: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_region_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.plot_region_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def plot_region_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Plots the region  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_region_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param str projection: null
        :param str sys: null
        :param str lon: null
        :param str lat: null
        :param str width: null
        :param str height: null
        :param str color_theme: null
        :param str auto_zoom: null
        :param str auto_rotate: null
        :param str grid: null
        :param str degree_style: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'projection', 'sys', 'lon', 'lat', 'width', 'height', 'color_theme', 'auto_zoom', 'auto_rotate', 'grid', 'degree_style']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `plot_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'projection' in params:
            query_params.append(('projection', params['projection']))  # noqa: E501
        if 'sys' in params:
            query_params.append(('sys', params['sys']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501
        if 'color_theme' in params:
            query_params.append(('colorTheme', params['color_theme']))  # noqa: E501
        if 'auto_zoom' in params:
            query_params.append(('autoZoom', params['auto_zoom']))  # noqa: E501
        if 'auto_rotate' in params:
            query_params.append(('autoRotate', params['auto_rotate']))  # noqa: E501
        if 'grid' in params:
            query_params.append(('grid', params['grid']))  # noqa: E501
        if 'degree_style' in params:
            query_params.append(('degreeStyle', params['degree_style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/plot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_region_advanced(self, region_name, plot, **kwargs):  # noqa: E501
        """Plots the footprint, with advanced parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_region_advanced(region_name, plot, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param PlotRequest plot: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_region_advanced_with_http_info(region_name, plot, **kwargs)  # noqa: E501
        else:
            (data) = self.plot_region_advanced_with_http_info(region_name, plot, **kwargs)  # noqa: E501
            return data

    def plot_region_advanced_with_http_info(self, region_name, plot, **kwargs):  # noqa: E501
        """Plots the footprint, with advanced parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_region_advanced_with_http_info(region_name, plot, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param PlotRequest plot: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'plot']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_region_advanced" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `plot_region_advanced`")  # noqa: E501
        # verify the required parameter 'plot' is set
        if ('plot' not in params or
                params['plot'] is None):
            raise ValueError("Missing the required parameter `plot` when calling `plot_region_advanced`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'plot' in params:
            body_params = params['plot']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'application/pdf', 'application/postscript', 'windows/metafile'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/plot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subtract_regions(self, region_name, request, **kwargs):  # noqa: E501
        """Compute the difference of regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subtract_regions(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.subtract_regions_with_http_info(region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.subtract_regions_with_http_info(region_name, request, **kwargs)  # noqa: E501
            return data

    def subtract_regions_with_http_info(self, region_name, request, **kwargs):  # noqa: E501
        """Compute the difference of regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subtract_regions_with_http_info(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'request', 'keep_original']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subtract_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `subtract_regions`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `subtract_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'keep_original' in params:
            query_params.append(('keepOriginal', params['keep_original']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/subtract', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def union_regions(self, region_name, request, **kwargs):  # noqa: E501
        """Compute the union of regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.union_regions(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.union_regions_with_http_info(region_name, request, **kwargs)  # noqa: E501
        else:
            (data) = self.union_regions_with_http_info(region_name, request, **kwargs)  # noqa: E501
            return data

    def union_regions_with_http_info(self, region_name, request, **kwargs):  # noqa: E501
        """Compute the union of regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.union_regions_with_http_info(region_name, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param RegionRequest request: null (required)
        :param str keep_original: null
        :return: RegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'request', 'keep_original']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method union_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `union_regions`")  # noqa: E501
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `union_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'keep_original' in params:
            query_params.append(('keepOriginal', params['keep_original']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/union', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_region(self, region_name, region, **kwargs):  # noqa: E501
        """Upload a region binary or other representation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_region(region_name, region, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param file region: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_region_with_http_info(region_name, region, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_region_with_http_info(region_name, region, **kwargs)  # noqa: E501
            return data

    def upload_region_with_http_info(self, region_name, region, **kwargs):  # noqa: E501
        """Upload a region binary or other representation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_region_with_http_info(region_name, region, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param file region: null (required)
        :return: RestError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'region']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `upload_region`")  # noqa: E501
        # verify the required parameter 'region' is set
        if ('region' not in params or
                params['region'] is None):
            raise ValueError("Missing the required parameter `region` when calling `upload_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'region' in params:
            body_params = params['region']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream', 'text/plain', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            'V1/Editor.svc/footprint/regions/{regionName}/raw', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RestError',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
