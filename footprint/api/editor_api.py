# coding: utf-8

"""
    null

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: null
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from footprint.api_client import ApiClient


class EditorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def combine_footprint_regions(self, region_name, **kwargs):  # noqa: E501
        """Compute union, intersection or difference of regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.combine_footprint_regions(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param str operation: null
        :param bool keep_original: null
        :return: DefinitionFootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.combine_footprint_regions_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.combine_footprint_regions_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def combine_footprint_regions_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Compute union, intersection or difference of regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.combine_footprint_regions_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param str operation: null
        :param bool keep_original: null
        :return: DefinitionFootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'operation', 'keep_original']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method combine_footprint_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `combine_footprint_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501
        if 'keep_original' in params:
            query_params.append(('keepOriginal', params['keep_original']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}?op={operation}&keepOrig={keepOriginal}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefinitionFootprintRegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_footprint_region(self, region_name, **kwargs):  # noqa: E501
        """Create new region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_footprint_region(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: DefinitionFootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def create_footprint_region_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Create new region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_footprint_region_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: DefinitionFootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `create_footprint_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefinitionFootprintRegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_footprint(self, **kwargs):  # noqa: E501
        """Delete footprint and reset the editor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_footprint(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_footprint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_footprint_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_footprint_with_http_info(self, **kwargs):  # noqa: E501
        """Delete footprint and reset the editor.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_footprint_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_footprint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_footprint_region(self, region_name, **kwargs):  # noqa: E501
        """Delete a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_footprint_region(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def delete_footprint_region_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Delete a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_footprint_region_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `delete_footprint_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_footprint_regions(self, **kwargs):  # noqa: E501
        """Deletes multiple regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_footprint_regions(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_footprint_regions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_footprint_regions_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_footprint_regions_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes multiple regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_footprint_regions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_footprint_regions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint(self, **kwargs):  # noqa: E501
        """Returns the header information of the edited footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DefinitionFootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_footprint_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the header information of the edited footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DefinitionFootprintResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefinitionFootprintResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_outline(self, **kwargs):  # noqa: E501
        """Returns the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_outline(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_outline_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_outline_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_footprint_outline_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_outline_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_outline" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/outline', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_outline_points(self, **kwargs):  # noqa: E501
        """Returns the points of the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_outline_points(async=True)
        >>> result = thread.get()

        :param async bool
        :param float resolution: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_outline_points_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_outline_points_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_footprint_outline_points_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the points of the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_outline_points_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param float resolution: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resolution']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_outline_points" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'resolution' in params:
            query_params.append(('resolution', params['resolution']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/outline/points?res={resolution}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_region(self, region_name, **kwargs):  # noqa: E501
        """Returns the header information of a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: DefinitionFootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def get_footprint_region_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Returns the header information of a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: DefinitionFootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_footprint_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefinitionFootprintRegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_region_outline(self, region_name, **kwargs):  # noqa: E501
        """Returns the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region_outline(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_region_outline_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_region_outline_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def get_footprint_region_outline_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Returns the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region_outline_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_region_outline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_footprint_region_outline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}/outline', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_region_outline_points(self, region_name, **kwargs):  # noqa: E501
        """Returns the points of the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region_outline_points(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param float resolution: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_region_outline_points_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_region_outline_points_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def get_footprint_region_outline_points_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Returns the points of the outline of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region_outline_points_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param float resolution: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'resolution']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_region_outline_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_footprint_region_outline_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'resolution' in params:
            query_params.append(('resolution', params['resolution']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}/outline/points?res={resolution}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_region_shape(self, region_name, **kwargs):  # noqa: E501
        """Returns the shape description of the footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region_shape(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_region_shape_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_region_shape_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def get_footprint_region_shape_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Returns the shape description of the footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region_shape_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_region_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_footprint_region_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}/shape', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_region_thumbnail(self, region_name, **kwargs):  # noqa: E501
        """Gets the thumbnail of a footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region_thumbnail(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_region_thumbnail_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_region_thumbnail_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def get_footprint_region_thumbnail_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Gets the thumbnail of a footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_region_thumbnail_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_region_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `get_footprint_region_thumbnail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}/thumbnail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_shape(self, **kwargs):  # noqa: E501
        """Returns the shape description of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_shape(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_shape_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_shape_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_footprint_shape_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the shape description of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_shape_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_shape" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/shape', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_footprint_thumbnail(self, **kwargs):  # noqa: E501
        """Gets the thumbnail of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_thumbnail(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_footprint_thumbnail_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_footprint_thumbnail_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_footprint_thumbnail_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the thumbnail of the footprint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_footprint_thumbnail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_footprint_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/thumbnail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_footprint_regions(self, **kwargs):  # noqa: E501
        """List all regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_footprint_regions(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DefinitionFootprintRegionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_footprint_regions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_footprint_regions_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_footprint_regions_with_http_info(self, **kwargs):  # noqa: E501
        """List all regions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_footprint_regions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DefinitionFootprintRegionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_footprint_regions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefinitionFootprintRegionListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_footprint_region(self, region_name, **kwargs):  # noqa: E501
        """Modify a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_footprint_region(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: DefinitionFootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def modify_footprint_region_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Modify a region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_footprint_region_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: DefinitionFootprintRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `modify_footprint_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefinitionFootprintRegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_footprint(self, **kwargs):  # noqa: E501
        """Plots the footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint(async=True)
        >>> result = thread.get()

        :param async bool
        :param str projection: null
        :param str sys: null
        :param str ra: null
        :param str dec: null
        :param str b: null
        :param str l: null
        :param float width: null
        :param float height: null
        :param str color_theme: null
        :param str auto_zoom: null
        :param str auto_rotate: null
        :param str grid: null
        :param str degree_style: null
        :param str highlights: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_footprint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.plot_footprint_with_http_info(**kwargs)  # noqa: E501
            return data

    def plot_footprint_with_http_info(self, **kwargs):  # noqa: E501
        """Plots the footprint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str projection: null
        :param str sys: null
        :param str ra: null
        :param str dec: null
        :param str b: null
        :param str l: null
        :param float width: null
        :param float height: null
        :param str color_theme: null
        :param str auto_zoom: null
        :param str auto_rotate: null
        :param str grid: null
        :param str degree_style: null
        :param str highlights: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['projection', 'sys', 'ra', 'dec', 'b', 'l', 'width', 'height', 'color_theme', 'auto_zoom', 'auto_rotate', 'grid', 'degree_style', 'highlights']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_footprint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'projection' in params:
            query_params.append(('projection', params['projection']))  # noqa: E501
        if 'sys' in params:
            query_params.append(('sys', params['sys']))  # noqa: E501
        if 'ra' in params:
            query_params.append(('ra', params['ra']))  # noqa: E501
        if 'dec' in params:
            query_params.append(('dec', params['dec']))  # noqa: E501
        if 'b' in params:
            query_params.append(('b', params['b']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501
        if 'color_theme' in params:
            query_params.append(('colorTheme', params['color_theme']))  # noqa: E501
        if 'auto_zoom' in params:
            query_params.append(('autoZoom', params['auto_zoom']))  # noqa: E501
        if 'auto_rotate' in params:
            query_params.append(('autoRotate', params['auto_rotate']))  # noqa: E501
        if 'grid' in params:
            query_params.append(('grid', params['grid']))  # noqa: E501
        if 'degree_style' in params:
            query_params.append(('degreeStyle', params['degree_style']))  # noqa: E501
        if 'highlights' in params:
            query_params.append(('highlights', params['highlights']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/plot?proj={projection}&sys={sys}&ra={ra}&dec={dec}&b={b}&l={l}&width={width}&height={height}&theme={colorTheme}&zoom={autoZoom}&rotate={autoRotate}&grid={grid}&degStyle={degreeStyle}&highlights={highlights}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_footprint_advanced(self, **kwargs):  # noqa: E501
        """Plots the footprint, with advanced parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_advanced(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_footprint_advanced_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.plot_footprint_advanced_with_http_info(**kwargs)  # noqa: E501
            return data

    def plot_footprint_advanced_with_http_info(self, **kwargs):  # noqa: E501
        """Plots the footprint, with advanced parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_advanced_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_footprint_advanced" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/plot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_footprint_region(self, region_name, **kwargs):  # noqa: E501
        """Plots a footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_region(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param str projection: null
        :param str sys: null
        :param str ra: null
        :param str dec: null
        :param str b: null
        :param str l: null
        :param float width: null
        :param float height: null
        :param str color_theme: null
        :param str auto_zoom: null
        :param str auto_rotate: null
        :param str grid: null
        :param str degree_style: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.plot_footprint_region_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def plot_footprint_region_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Plots a footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_region_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :param str projection: null
        :param str sys: null
        :param str ra: null
        :param str dec: null
        :param str b: null
        :param str l: null
        :param float width: null
        :param float height: null
        :param str color_theme: null
        :param str auto_zoom: null
        :param str auto_rotate: null
        :param str grid: null
        :param str degree_style: null
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name', 'projection', 'sys', 'ra', 'dec', 'b', 'l', 'width', 'height', 'color_theme', 'auto_zoom', 'auto_rotate', 'grid', 'degree_style']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_footprint_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `plot_footprint_region`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []
        if 'projection' in params:
            query_params.append(('projection', params['projection']))  # noqa: E501
        if 'sys' in params:
            query_params.append(('sys', params['sys']))  # noqa: E501
        if 'ra' in params:
            query_params.append(('ra', params['ra']))  # noqa: E501
        if 'dec' in params:
            query_params.append(('dec', params['dec']))  # noqa: E501
        if 'b' in params:
            query_params.append(('b', params['b']))  # noqa: E501
        if 'l' in params:
            query_params.append(('l', params['l']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501
        if 'color_theme' in params:
            query_params.append(('colorTheme', params['color_theme']))  # noqa: E501
        if 'auto_zoom' in params:
            query_params.append(('autoZoom', params['auto_zoom']))  # noqa: E501
        if 'auto_rotate' in params:
            query_params.append(('autoRotate', params['auto_rotate']))  # noqa: E501
        if 'grid' in params:
            query_params.append(('grid', params['grid']))  # noqa: E501
        if 'degree_style' in params:
            query_params.append(('degreeStyle', params['degree_style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}/plot?proj={projection}&sys={sys}&ra={ra}&dec={dec}&b={b}&l={l}&width={width}&height={height}&theme={colorTheme}&zoom={autoZoom}&rotate={autoRotate}&grid={grid}&degStyle={degreeStyle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plot_footprint_region_advanced(self, region_name, **kwargs):  # noqa: E501
        """Plots a footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_region_advanced(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.plot_footprint_region_advanced_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.plot_footprint_region_advanced_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def plot_footprint_region_advanced_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Plots a footprint region.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.plot_footprint_region_advanced_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plot_footprint_region_advanced" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `plot_footprint_region_advanced`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}/plot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_footprint_region_shape(self, region_name, **kwargs):  # noqa: E501
        """Upload a region shape binary or other representation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_footprint_region_shape(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_footprint_region_shape_with_http_info(region_name, **kwargs)  # noqa: E501
        else:
            (data) = self.set_footprint_region_shape_with_http_info(region_name, **kwargs)  # noqa: E501
            return data

    def set_footprint_region_shape_with_http_info(self, region_name, **kwargs):  # noqa: E501
        """Upload a region shape binary or other representation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_footprint_region_shape_with_http_info(region_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str region_name: null (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_footprint_region_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_name' is set
        if ('region_name' not in params or
                params['region_name'] is None):
            raise ValueError("Missing the required parameter `region_name` when calling `set_footprint_region_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_name' in params:
            path_params['regionName'] = params['region_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/footprint/regions/{regionName}/shape', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
