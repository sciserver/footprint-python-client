# coding: utf-8

"""
    SkyQuery REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Angle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'degrees': 'str',
        'radians': 'float',
        'arc_minutes': 'float',
        'arc_seconds': 'float'
    }

    attribute_map = {
        'degrees': 'degrees',
        'radians': 'radians',
        'arc_minutes': 'arcMinutes',
        'arc_seconds': 'arcSeconds'
    }

    def __init__(self, degrees=None, radians=None, arc_minutes=None, arc_seconds=None):  # noqa: E501
        """Angle - a model defined in Swagger"""  # noqa: E501

        self._degrees = None
        self._radians = None
        self._arc_minutes = None
        self._arc_seconds = None
        self.discriminator = None

        if degrees is not None:
            self.degrees = degrees
        if radians is not None:
            self.radians = radians
        if arc_minutes is not None:
            self.arc_minutes = arc_minutes
        if arc_seconds is not None:
            self.arc_seconds = arc_seconds

    @property
    def degrees(self):
        """Gets the degrees of this Angle.  # noqa: E501


        :return: The degrees of this Angle.  # noqa: E501
        :rtype: str
        """
        return self._degrees

    @degrees.setter
    def degrees(self, degrees):
        """Sets the degrees of this Angle.


        :param degrees: The degrees of this Angle.  # noqa: E501
        :type: str
        """

        self._degrees = degrees

    @property
    def radians(self):
        """Gets the radians of this Angle.  # noqa: E501


        :return: The radians of this Angle.  # noqa: E501
        :rtype: float
        """
        return self._radians

    @radians.setter
    def radians(self, radians):
        """Sets the radians of this Angle.


        :param radians: The radians of this Angle.  # noqa: E501
        :type: float
        """

        self._radians = radians

    @property
    def arc_minutes(self):
        """Gets the arc_minutes of this Angle.  # noqa: E501


        :return: The arc_minutes of this Angle.  # noqa: E501
        :rtype: float
        """
        return self._arc_minutes

    @arc_minutes.setter
    def arc_minutes(self, arc_minutes):
        """Sets the arc_minutes of this Angle.


        :param arc_minutes: The arc_minutes of this Angle.  # noqa: E501
        :type: float
        """

        self._arc_minutes = arc_minutes

    @property
    def arc_seconds(self):
        """Gets the arc_seconds of this Angle.  # noqa: E501


        :return: The arc_seconds of this Angle.  # noqa: E501
        :rtype: float
        """
        return self._arc_seconds

    @arc_seconds.setter
    def arc_seconds(self, arc_seconds):
        """Sets the arc_seconds of this Angle.


        :param arc_seconds: The arc_seconds of this Angle.  # noqa: E501
        :type: float
        """

        self._arc_seconds = arc_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Angle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
