# coding: utf-8

"""
    null

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: null
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from footprint.models.coordinate_system import CoordinateSystem  # noqa: F401,E501
from footprint.models.region import Region  # noqa: F401,E501
from footprint.models.rotation import Rotation  # noqa: F401,E501


class RegionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'Region',
        'rotation': 'Rotation',
        'sys': 'CoordinateSystem',
        'selection': 'list[str]',
        'keep_original': 'bool'
    }

    attribute_map = {
        'region': 'region',
        'rotation': 'rotation',
        'sys': 'sys',
        'selection': 'selection',
        'keep_original': 'keepOriginal'
    }

    def __init__(self, region=None, rotation=None, sys=None, selection=None, keep_original=None):  # noqa: E501
        """RegionRequest - a model defined in Swagger"""  # noqa: E501

        self._region = None
        self._rotation = None
        self._sys = None
        self._selection = None
        self._keep_original = None
        self.discriminator = None

        if region is not None:
            self.region = region
        if rotation is not None:
            self.rotation = rotation
        if sys is not None:
            self.sys = sys
        if selection is not None:
            self.selection = selection
        if keep_original is not None:
            self.keep_original = keep_original

    @property
    def region(self):
        """Gets the region of this RegionRequest.  # noqa: E501


        :return: The region of this RegionRequest.  # noqa: E501
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RegionRequest.


        :param region: The region of this RegionRequest.  # noqa: E501
        :type: Region
        """

        self._region = region

    @property
    def rotation(self):
        """Gets the rotation of this RegionRequest.  # noqa: E501


        :return: The rotation of this RegionRequest.  # noqa: E501
        :rtype: Rotation
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this RegionRequest.


        :param rotation: The rotation of this RegionRequest.  # noqa: E501
        :type: Rotation
        """

        self._rotation = rotation

    @property
    def sys(self):
        """Gets the sys of this RegionRequest.  # noqa: E501


        :return: The sys of this RegionRequest.  # noqa: E501
        :rtype: CoordinateSystem
        """
        return self._sys

    @sys.setter
    def sys(self, sys):
        """Sets the sys of this RegionRequest.


        :param sys: The sys of this RegionRequest.  # noqa: E501
        :type: CoordinateSystem
        """

        self._sys = sys

    @property
    def selection(self):
        """Gets the selection of this RegionRequest.  # noqa: E501


        :return: The selection of this RegionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._selection

    @selection.setter
    def selection(self, selection):
        """Sets the selection of this RegionRequest.


        :param selection: The selection of this RegionRequest.  # noqa: E501
        :type: list[str]
        """

        self._selection = selection

    @property
    def keep_original(self):
        """Gets the keep_original of this RegionRequest.  # noqa: E501


        :return: The keep_original of this RegionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._keep_original

    @keep_original.setter
    def keep_original(self, keep_original):
        """Sets the keep_original of this RegionRequest.


        :param keep_original: The keep_original of this RegionRequest.  # noqa: E501
        :type: bool
        """

        self._keep_original = keep_original

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
