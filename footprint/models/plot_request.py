# coding: utf-8

"""
    null

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: null
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from footprint.models.plot import Plot  # noqa: F401,E501
from footprint.models.region import Region  # noqa: F401,E501


class PlotRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plot': 'Plot',
        'regions': 'list[Region]',
        'selection': 'list[str]'
    }

    attribute_map = {
        'plot': 'plot',
        'regions': 'regions',
        'selection': 'selection'
    }

    def __init__(self, plot=None, regions=None, selection=None):  # noqa: E501
        """PlotRequest - a model defined in Swagger"""  # noqa: E501

        self._plot = None
        self._regions = None
        self._selection = None
        self.discriminator = None

        if plot is not None:
            self.plot = plot
        if regions is not None:
            self.regions = regions
        if selection is not None:
            self.selection = selection

    @property
    def plot(self):
        """Gets the plot of this PlotRequest.  # noqa: E501


        :return: The plot of this PlotRequest.  # noqa: E501
        :rtype: Plot
        """
        return self._plot

    @plot.setter
    def plot(self, plot):
        """Sets the plot of this PlotRequest.


        :param plot: The plot of this PlotRequest.  # noqa: E501
        :type: Plot
        """

        self._plot = plot

    @property
    def regions(self):
        """Gets the regions of this PlotRequest.  # noqa: E501


        :return: The regions of this PlotRequest.  # noqa: E501
        :rtype: list[Region]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this PlotRequest.


        :param regions: The regions of this PlotRequest.  # noqa: E501
        :type: list[Region]
        """

        self._regions = regions

    @property
    def selection(self):
        """Gets the selection of this PlotRequest.  # noqa: E501


        :return: The selection of this PlotRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._selection

    @selection.setter
    def selection(self, selection):
        """Sets the selection of this PlotRequest.


        :param selection: The selection of this PlotRequest.  # noqa: E501
        :type: list[str]
        """

        self._selection = selection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlotRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
