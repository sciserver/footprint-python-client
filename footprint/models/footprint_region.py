# coding: utf-8

"""
    null

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: null
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FootprintRegion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'footprint_name': 'str',
        'footprint_url': 'str',
        'name': 'str',
        'url': 'str',
        'fill_factor': 'float',
        'is_simplified': 'bool',
        'area': 'float',
        'region_string': 'str'
    }

    attribute_map = {
        'owner': 'owner',
        'footprint_name': 'footprintName',
        'footprint_url': 'footprintUrl',
        'name': 'name',
        'url': 'url',
        'fill_factor': 'fillFactor',
        'is_simplified': 'isSimplified',
        'area': 'area',
        'region_string': 'regionString'
    }

    def __init__(self, owner=None, footprint_name=None, footprint_url=None, name=None, url=None, fill_factor=None, is_simplified=None, area=None, region_string=None):  # noqa: E501
        """FootprintRegion - a model defined in Swagger"""  # noqa: E501

        self._owner = None
        self._footprint_name = None
        self._footprint_url = None
        self._name = None
        self._url = None
        self._fill_factor = None
        self._is_simplified = None
        self._area = None
        self._region_string = None
        self.discriminator = None

        if owner is not None:
            self.owner = owner
        if footprint_name is not None:
            self.footprint_name = footprint_name
        if footprint_url is not None:
            self.footprint_url = footprint_url
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if fill_factor is not None:
            self.fill_factor = fill_factor
        if is_simplified is not None:
            self.is_simplified = is_simplified
        if area is not None:
            self.area = area
        if region_string is not None:
            self.region_string = region_string

    @property
    def owner(self):
        """Gets the owner of this FootprintRegion.  # noqa: E501


        :return: The owner of this FootprintRegion.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this FootprintRegion.


        :param owner: The owner of this FootprintRegion.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def footprint_name(self):
        """Gets the footprint_name of this FootprintRegion.  # noqa: E501


        :return: The footprint_name of this FootprintRegion.  # noqa: E501
        :rtype: str
        """
        return self._footprint_name

    @footprint_name.setter
    def footprint_name(self, footprint_name):
        """Sets the footprint_name of this FootprintRegion.


        :param footprint_name: The footprint_name of this FootprintRegion.  # noqa: E501
        :type: str
        """

        self._footprint_name = footprint_name

    @property
    def footprint_url(self):
        """Gets the footprint_url of this FootprintRegion.  # noqa: E501


        :return: The footprint_url of this FootprintRegion.  # noqa: E501
        :rtype: str
        """
        return self._footprint_url

    @footprint_url.setter
    def footprint_url(self, footprint_url):
        """Sets the footprint_url of this FootprintRegion.


        :param footprint_url: The footprint_url of this FootprintRegion.  # noqa: E501
        :type: str
        """

        self._footprint_url = footprint_url

    @property
    def name(self):
        """Gets the name of this FootprintRegion.  # noqa: E501


        :return: The name of this FootprintRegion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FootprintRegion.


        :param name: The name of this FootprintRegion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this FootprintRegion.  # noqa: E501


        :return: The url of this FootprintRegion.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FootprintRegion.


        :param url: The url of this FootprintRegion.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def fill_factor(self):
        """Gets the fill_factor of this FootprintRegion.  # noqa: E501


        :return: The fill_factor of this FootprintRegion.  # noqa: E501
        :rtype: float
        """
        return self._fill_factor

    @fill_factor.setter
    def fill_factor(self, fill_factor):
        """Sets the fill_factor of this FootprintRegion.


        :param fill_factor: The fill_factor of this FootprintRegion.  # noqa: E501
        :type: float
        """

        self._fill_factor = fill_factor

    @property
    def is_simplified(self):
        """Gets the is_simplified of this FootprintRegion.  # noqa: E501


        :return: The is_simplified of this FootprintRegion.  # noqa: E501
        :rtype: bool
        """
        return self._is_simplified

    @is_simplified.setter
    def is_simplified(self, is_simplified):
        """Sets the is_simplified of this FootprintRegion.


        :param is_simplified: The is_simplified of this FootprintRegion.  # noqa: E501
        :type: bool
        """

        self._is_simplified = is_simplified

    @property
    def area(self):
        """Gets the area of this FootprintRegion.  # noqa: E501


        :return: The area of this FootprintRegion.  # noqa: E501
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this FootprintRegion.


        :param area: The area of this FootprintRegion.  # noqa: E501
        :type: float
        """

        self._area = area

    @property
    def region_string(self):
        """Gets the region_string of this FootprintRegion.  # noqa: E501


        :return: The region_string of this FootprintRegion.  # noqa: E501
        :rtype: str
        """
        return self._region_string

    @region_string.setter
    def region_string(self, region_string):
        """Sets the region_string of this FootprintRegion.


        :param region_string: The region_string of this FootprintRegion.  # noqa: E501
        :type: str
        """

        self._region_string = region_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FootprintRegion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
