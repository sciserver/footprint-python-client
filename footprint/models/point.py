# coding: utf-8

"""
    SkyQuery REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Point(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ra': 'str',
        'dec': 'str',
        'lon': 'float',
        'lat': 'float',
        'cx': 'float',
        'cy': 'float',
        'cz': 'float'
    }

    attribute_map = {
        'ra': 'ra',
        'dec': 'dec',
        'lon': 'lon',
        'lat': 'lat',
        'cx': 'cx',
        'cy': 'cy',
        'cz': 'cz'
    }

    def __init__(self, ra=None, dec=None, lon=None, lat=None, cx=None, cy=None, cz=None):  # noqa: E501
        """Point - a model defined in Swagger"""  # noqa: E501

        self._ra = None
        self._dec = None
        self._lon = None
        self._lat = None
        self._cx = None
        self._cy = None
        self._cz = None
        self.discriminator = None

        if ra is not None:
            self.ra = ra
        if dec is not None:
            self.dec = dec
        if lon is not None:
            self.lon = lon
        if lat is not None:
            self.lat = lat
        if cx is not None:
            self.cx = cx
        if cy is not None:
            self.cy = cy
        if cz is not None:
            self.cz = cz

    @property
    def ra(self):
        """Gets the ra of this Point.  # noqa: E501


        :return: The ra of this Point.  # noqa: E501
        :rtype: str
        """
        return self._ra

    @ra.setter
    def ra(self, ra):
        """Sets the ra of this Point.


        :param ra: The ra of this Point.  # noqa: E501
        :type: str
        """

        self._ra = ra

    @property
    def dec(self):
        """Gets the dec of this Point.  # noqa: E501


        :return: The dec of this Point.  # noqa: E501
        :rtype: str
        """
        return self._dec

    @dec.setter
    def dec(self, dec):
        """Sets the dec of this Point.


        :param dec: The dec of this Point.  # noqa: E501
        :type: str
        """

        self._dec = dec

    @property
    def lon(self):
        """Gets the lon of this Point.  # noqa: E501


        :return: The lon of this Point.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Point.


        :param lon: The lon of this Point.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def lat(self):
        """Gets the lat of this Point.  # noqa: E501


        :return: The lat of this Point.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Point.


        :param lat: The lat of this Point.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def cx(self):
        """Gets the cx of this Point.  # noqa: E501


        :return: The cx of this Point.  # noqa: E501
        :rtype: float
        """
        return self._cx

    @cx.setter
    def cx(self, cx):
        """Sets the cx of this Point.


        :param cx: The cx of this Point.  # noqa: E501
        :type: float
        """

        self._cx = cx

    @property
    def cy(self):
        """Gets the cy of this Point.  # noqa: E501


        :return: The cy of this Point.  # noqa: E501
        :rtype: float
        """
        return self._cy

    @cy.setter
    def cy(self, cy):
        """Sets the cy of this Point.


        :param cy: The cy of this Point.  # noqa: E501
        :type: float
        """

        self._cy = cy

    @property
    def cz(self):
        """Gets the cz of this Point.  # noqa: E501


        :return: The cz of this Point.  # noqa: E501
        :rtype: float
        """
        return self._cz

    @cz.setter
    def cz(self, cz):
        """Sets the cz of this Point.


        :param cz: The cz of this Point.  # noqa: E501
        :type: float
        """

        self._cz = cz

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Point):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
