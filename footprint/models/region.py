# coding: utf-8

"""
    null

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: null
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from footprint.models.c_hull import CHull  # noqa: F401,E501
from footprint.models.circle import Circle  # noqa: F401,E501
from footprint.models.poly import Poly  # noqa: F401,E501
from footprint.models.rect import Rect  # noqa: F401,E501


class Region(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'footprint_name': 'str',
        'footprint_url': 'str',
        'name': 'str',
        'fill_factor': 'float',
        'is_simplified': 'bool',
        'area': 'float',
        'region_string': 'str',
        'circle': 'Circle',
        'rect': 'Rect',
        'poly': 'Poly',
        'chull': 'CHull'
    }

    attribute_map = {
        'owner': 'owner',
        'footprint_name': 'footprintName',
        'footprint_url': 'footprintUrl',
        'name': 'name',
        'fill_factor': 'fillFactor',
        'is_simplified': 'isSimplified',
        'area': 'area',
        'region_string': 'regionString',
        'circle': 'circle',
        'rect': 'rect',
        'poly': 'poly',
        'chull': 'chull'
    }

    def __init__(self, owner=None, footprint_name=None, footprint_url=None, name=None, fill_factor=None, is_simplified=None, area=None, region_string=None, circle=None, rect=None, poly=None, chull=None):  # noqa: E501
        """Region - a model defined in Swagger"""  # noqa: E501

        self._owner = None
        self._footprint_name = None
        self._footprint_url = None
        self._name = None
        self._fill_factor = None
        self._is_simplified = None
        self._area = None
        self._region_string = None
        self._circle = None
        self._rect = None
        self._poly = None
        self._chull = None
        self.discriminator = None

        if owner is not None:
            self.owner = owner
        if footprint_name is not None:
            self.footprint_name = footprint_name
        if footprint_url is not None:
            self.footprint_url = footprint_url
        if name is not None:
            self.name = name
        if fill_factor is not None:
            self.fill_factor = fill_factor
        if is_simplified is not None:
            self.is_simplified = is_simplified
        if area is not None:
            self.area = area
        if region_string is not None:
            self.region_string = region_string
        if circle is not None:
            self.circle = circle
        if rect is not None:
            self.rect = rect
        if poly is not None:
            self.poly = poly
        if chull is not None:
            self.chull = chull

    @property
    def owner(self):
        """Gets the owner of this Region.  # noqa: E501


        :return: The owner of this Region.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Region.


        :param owner: The owner of this Region.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def footprint_name(self):
        """Gets the footprint_name of this Region.  # noqa: E501


        :return: The footprint_name of this Region.  # noqa: E501
        :rtype: str
        """
        return self._footprint_name

    @footprint_name.setter
    def footprint_name(self, footprint_name):
        """Sets the footprint_name of this Region.


        :param footprint_name: The footprint_name of this Region.  # noqa: E501
        :type: str
        """

        self._footprint_name = footprint_name

    @property
    def footprint_url(self):
        """Gets the footprint_url of this Region.  # noqa: E501


        :return: The footprint_url of this Region.  # noqa: E501
        :rtype: str
        """
        return self._footprint_url

    @footprint_url.setter
    def footprint_url(self, footprint_url):
        """Sets the footprint_url of this Region.


        :param footprint_url: The footprint_url of this Region.  # noqa: E501
        :type: str
        """

        self._footprint_url = footprint_url

    @property
    def name(self):
        """Gets the name of this Region.  # noqa: E501


        :return: The name of this Region.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Region.


        :param name: The name of this Region.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def fill_factor(self):
        """Gets the fill_factor of this Region.  # noqa: E501


        :return: The fill_factor of this Region.  # noqa: E501
        :rtype: float
        """
        return self._fill_factor

    @fill_factor.setter
    def fill_factor(self, fill_factor):
        """Sets the fill_factor of this Region.


        :param fill_factor: The fill_factor of this Region.  # noqa: E501
        :type: float
        """

        self._fill_factor = fill_factor

    @property
    def is_simplified(self):
        """Gets the is_simplified of this Region.  # noqa: E501


        :return: The is_simplified of this Region.  # noqa: E501
        :rtype: bool
        """
        return self._is_simplified

    @is_simplified.setter
    def is_simplified(self, is_simplified):
        """Sets the is_simplified of this Region.


        :param is_simplified: The is_simplified of this Region.  # noqa: E501
        :type: bool
        """

        self._is_simplified = is_simplified

    @property
    def area(self):
        """Gets the area of this Region.  # noqa: E501


        :return: The area of this Region.  # noqa: E501
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Region.


        :param area: The area of this Region.  # noqa: E501
        :type: float
        """

        self._area = area

    @property
    def region_string(self):
        """Gets the region_string of this Region.  # noqa: E501


        :return: The region_string of this Region.  # noqa: E501
        :rtype: str
        """
        return self._region_string

    @region_string.setter
    def region_string(self, region_string):
        """Sets the region_string of this Region.


        :param region_string: The region_string of this Region.  # noqa: E501
        :type: str
        """

        self._region_string = region_string

    @property
    def circle(self):
        """Gets the circle of this Region.  # noqa: E501


        :return: The circle of this Region.  # noqa: E501
        :rtype: Circle
        """
        return self._circle

    @circle.setter
    def circle(self, circle):
        """Sets the circle of this Region.


        :param circle: The circle of this Region.  # noqa: E501
        :type: Circle
        """

        self._circle = circle

    @property
    def rect(self):
        """Gets the rect of this Region.  # noqa: E501


        :return: The rect of this Region.  # noqa: E501
        :rtype: Rect
        """
        return self._rect

    @rect.setter
    def rect(self, rect):
        """Sets the rect of this Region.


        :param rect: The rect of this Region.  # noqa: E501
        :type: Rect
        """

        self._rect = rect

    @property
    def poly(self):
        """Gets the poly of this Region.  # noqa: E501


        :return: The poly of this Region.  # noqa: E501
        :rtype: Poly
        """
        return self._poly

    @poly.setter
    def poly(self, poly):
        """Sets the poly of this Region.


        :param poly: The poly of this Region.  # noqa: E501
        :type: Poly
        """

        self._poly = poly

    @property
    def chull(self):
        """Gets the chull of this Region.  # noqa: E501


        :return: The chull of this Region.  # noqa: E501
        :rtype: CHull
        """
        return self._chull

    @chull.setter
    def chull(self, chull):
        """Sets the chull of this Region.


        :param chull: The chull of this Region.  # noqa: E501
        :type: CHull
        """

        self._chull = chull

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Region):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
